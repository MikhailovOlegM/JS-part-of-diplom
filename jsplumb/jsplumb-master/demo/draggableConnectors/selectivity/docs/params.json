{"name":"selectivity","tagline":"Flexible and modular alternative to Select2","body":"Examples\r\n========\r\n\r\n<h1>Select a single city</h1>\r\n<p><span id=\"single-input\" class=\"selectivity-input\"></span></p>\r\n\r\n    $('#single-input').selectivity({\r\n        allowClear: true,\r\n        items: ['Amsterdam', 'Antwerp'/*, ...*/],\r\n        placeholder: 'No city selected'\r\n    });\r\n\r\n<h1>Select multiple cities</h1>\r\n<p><span id=\"multiple-input\" class=\"selectivity-input\"></span></p>\r\n\r\n    $('#multiple-input').selectivity({\r\n        items: ['Amsterdam', 'Antwerp'/*, ...*/],\r\n        multiple: true,\r\n        placeholder: 'No city selected'\r\n    });\r\n\r\n<h1>Select one or more tags</h1>\r\n<p><span id=\"tags-input\" class=\"selectivity-input\"></span></p>\r\n\r\n    $('#tags-input').selectivity({\r\n        items: ['red', 'green', 'blue'],\r\n        multiple: true,\r\n        tokenSeparators: [' '],\r\n        value: ['brown', 'red', 'green']\r\n    });\r\n\r\n<h1>Enter one or more email addresses</h1>\r\n<p><span id=\"emails-input\" class=\"selectivity-input\"></span></p>\r\n\r\n    $('#emails-input').selectivity({\r\n        inputType: 'Email',\r\n        placeholder: 'Type or paste email addresses'\r\n    });\r\n\r\nAPI\r\n===\r\n\r\nCall `$(selector).selectivity(options)` to initialize a Selectivity instance on the element specified by the\r\ngiven selector. The following options are supported:\r\n\r\nOption          | Type                      | Description\r\n--------------- | ------------------------- | -----------\r\nallowClear      | `Boolean`                 | Set to `true` to allow the selection to be cleared. This option only applies to single-value inputs.\r\nbackspaceHighlightsBeforeDelete | `Boolean` | If set to `true`, when the user enters a backspace while there is no text in the search field but there are selected items, the last selected item will be highlighted and when a second backspace is entered the item is deleted. If `false`, the item gets deleted on the first backspace. The default value is true on devices that have touch input and false on devices that don't.\r\ncloseOnSelect   | `Boolean`                 | Set to `false` to keep the dropdown open after the user has selected an item. This is useful if you want to allow the user to quickly select multiple items. The default value is `true`.\r\ncreateTokenItem | `Function`                | Function to create a new item from a user's search term. This is used to turn the term into an item when dropdowns are disabled and the user presses Enter. It is also used by the default tokenizer to create items for individual tokens. The function receives a `token` parameter which is the search term (or part of a search term) to create an item for and must return an item object with `id` and `text` properties or `null` if no token can be created from the term. The default is a function that returns an item where the id and text both match the term for any non-empty string and which returns `null` otherwise. This option only applies to multiple-value inputs.\r\ndata            | `Object` or `Array`       | Initial selection data to set. This should be an object with `id` and `text` properties in the case of input type 'Single', or an array of such objects otherwise. This option is mutually exclusive with `value`.\r\nvalue           | `ID` or `Array`           | Initial value to set. This should be an ID (string or number) in the case of input type 'Single', or array of IDs otherwise. This property is mutually exclusive with `data`.\r\ninitSelection   | `Function`                | Function to map values by ID to selection data. This function receives two arguments, `value` and `callback`. The value is the current value of the selection, which is an ID or an array of IDs depending on the input type. The callback should be invoked with an object or array of objects, respectively, containing `id` and `text` properties.\r\ninputType       | `String` or `Function`    | The input type to use. Default input types include 'Multiple', 'Single' and 'Email', but you can add custom input types to the `selectivity.InputTypes` map or just specify one here as a function. The default value is 'Single', unless `multiple` is `true` in which case it is 'Multiple'.\r\nitems           | `Array`                   | Array of items from which to select. Should be an array of objects with `id` and `text` properties. As convenience, you may also pass an array of strings, in which case the same string is used for both the ID and the text. If items are given, all items are expected to be available locally and all selection operations operate on this local array only. If `null`, items are not available locally, and the `query` option should be provided to fetch remote data.\r\nmatcher         | `Function`                | Function to determine whether text matches a given search term. Note this function is only used if you have specified an array of items. Receives two arguments: `term` and `text`. The term is the search term, which for performance reasons has always been already processed using `selectivity.transformText()`. The text is the text that should match the search term.\r\nplaceholder     | `String`                  | Placeholder text to display when the element has no focus and selected items.\r\nquery           | `Function`                | Function to use for querying items. Receives a single object as argument with the `callback`, `offset` and `term` properties. The callback should be invoked when the results are available. It should be passed a single object with `results` and `more` properties. The first is an array with result items and the latter is an optional boolean that may be set to `true` indicate more results are available through pagination. Offset is a property is only used for pagination and indicates how many results should be skipped when returning more results. The term is the search term the user is searching for. Unlike with the matcher function, the term has not been processed using `selectivity.transformText()`. This option is ignored if the `items` option is used.\r\nshowDropdown    | `Boolean`                 | Set to false if you don't want to use any dropdown (you can still open still open it programmatically using `open()`).\r\ntemplates       | `Object`                  | Object with instance-specific templates to override the global templates assigned to `selectivity.Templates`.\r\ntokenizer       | `Function`                | Function for tokenizing search terms. Will receive the `input` (the input string to tokenize), `selection` (the current selection data), `createToken` (callback to create a token from the search terms, should be passed an item object with `id` and `text` properties) and `options` (the options set on the Selectivity instance) arguments. Any string returned by the tokenizer function is treated as the remainder of untokenized input. This option only applies to multiple-value inputs.\r\ntokenSeparators | `Array`                   | Array of string separators which are used to separate the search term into tokens. If specified and the tokenizer property is not set, the tokenizer property will be set to a function which splits the search term into tokens separated by any of the given separators. The tokens will be converted into selectable items using the `createTokenItem` function. The default tokenizer also filters out already selected items. This option only applies to multiple-value inputs.\r\n\r\nFor documentation about all the available methods once selectivity has been instantiated, I refer to the\r\ninline documentation in the source files for now.\r\n\r\nEvents\r\n======\r\n\r\nAll of these events are emitted on the element to which the Selectivity instance is attached and can be\r\nlistened to using jQuery's `on()` method.\r\n\r\nEvent                 | Description\r\n--------------------- | -----------\r\n`\"change\"`            | Emitted when the selection has been changed. Additional properties on the event object: `added`, `removed` and `val`.\r\n`\"selectivity-closed\"`    | Emitted when the dropdown is closed.\r\n`\"selectivity-highlight\"` | Emitted when an item in the dropdown is highlighted. Additional properties on the event object: `item` and `val`.\r\n`\"selectivity-open\"`      | Emitted when the dropdown is opened.\r\n`\"selectivity-opening\"`   | Emitted when the dropdown is about to be opened. You can call `preventDefault()` on the event object to cancel the opening of the dropdown.\r\n`\"selectivity-selected\"`  | Emitted when an item has been selected. Additional properties on the event object: `id` and `item`.\r\n`\"selectivity-selecting\"` | Emitted when an item is about to be selected. You can call `preventDefault()` on on the event object to prevent the item from being selected. Additional properties on the event object: `id` and `item`.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}
